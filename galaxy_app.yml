---
- name: Setup the Galaxy application
  hosts: k8s_cluster
  gather_facts: false
  vars:
    chart: cloudve/galaxy
    version: 6.5.0
    job_max_cores: 1
    job_max_mem: 4
  environment:
    KUBECONFIG: "{{ kubeconfig_path }}"
  tasks:
    - name: Add CloudVE Helm repository
      kubernetes.core.helm_repository:
        name: cloudve
        repo_url: https://raw.githubusercontent.com/CloudVE/helm-charts/master/
        state: present

    - name: Create the galaxy-deps namespace
      kubernetes.core.k8s:
        kind: Namespace
        name: galaxy-deps
        state: present
        kubeconfig: "{{ kubeconfig_path }}"

    - name: Helm install galaxy-deps
      kubernetes.core.helm:
        name: galaxy-deps
        namespace: galaxy-deps
        chart_ref: "cloudve/galaxy-deps"
        chart_version: "1.0.0"
        kubeconfig: "{{ kubeconfig_path }}"

    - name: Create the galaxy namespace
      kubernetes.core.k8s:
        kind: Namespace
        name: galaxy
        state: present
        kubeconfig: "{{ kubeconfig_path }}"

    - name: Copy the values file to the remote host
      ansible.builtin.copy:
        src: "{{ values_file }}"
        dest: /tmp/values.yml
        mode: '0644'

    - name: Helm install Galaxy
      kubernetes.core.helm:
        name: galaxy
        namespace: galaxy
        chart_ref: "{{ chart }}"
        chart_version: "{{ version }}"
        kubeconfig: "{{ kubeconfig_path }}"
        values_files:
          - /tmp/values.yml
        values:
          persistence:
            size: "{{ gxy_persistence_size | default('20Gi') }}"
          postgresql:
            galaxyDatabasePassword: "{{ gxy_db_password | default('galaxydbpassword') }}"
          configs:
            galaxy.yml:
              galaxy:
                single_user: "{{ gxy_user }}"
                admin_users: "{{ gxy_user }}"
                master_api_key: "{{ gxy_api_key | default(omit) }}"
          jobs:
            rules:
              tpv_rules_local.yml:
                destinations:
                  k8s:
                    max_cores: "{{ job_max_cores }}"
                    max_mem: "{{ job_max_mem }}"
